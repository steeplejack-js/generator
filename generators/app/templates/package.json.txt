{
  "name": "<%- name %>",
  "version": "0.0.0",
  "description": "<%- description %>",
  "main": "./app",
  "nyc": {
    "all": true,
    "check-coverage": true,
    "cache": true,
    "lines": 100,
    "statements": 100,
    "functions": 100,
    "branches": 100,
    "include": [
      "src/*.js",
      "src/**/*.js"
    ],
    "reporter": [
      "lcov",
      "text-summary"
    ],<% if (compile) { %>
    "require": [
      "babel-register"
    ],<% } %>
    "sourceMap": <%- !compile %>,
    "instrument": <%- !compile %>
  },
  "scripts": {
    "clean": "rm -Rf ./build ./coverage ./dist",
    "clean:all": "npm run clean && rm -Rf .nyc_output npm-debug.log",
    "ci": "npm test -s && npm run coverage -s && npm run compile -s",
    "compile": "npm run clean && npm run compile:js -s && npm run copy",
    "compile:js": "<% if (compile) { %>babel --source-maps=inline --out-dir ./build ./src<% } else { %>cp -Rf src build<% } %>",
    "copy": "npm run copy:json -s & npm run copy:docker -s",
    "copy:docker": "cp Dockerfile build",
    "copy:json": "cp package.json build<% if (compile) { %>; cp src/*.json build<% } %>",
    "coverage": "cross-env NODE_ENV=test nyc mocha --ui bdd --recursive test/unit",
    "dist": "npm run compile && mkdir -p dist && cd build && npm install --production && tar -zcvf ../dist/dist.tar.gz ./",
    "postversion": "git push --tags && git push",
    "serve": "nodemon<% if (compile) { %> --exec babel-node<% } %> --debug=5858 --legacy-watch ./src/app.js | bunyan",
    "start": "node<% if (compile) { %> --require source-map-support/register<% } %> ./",
    "test": "npm run test:lint -s && npm run test:unit -s && npm run test:e2e -s",
    "test:e2e": "<%- envvarPrefix %>LOGGING_STREAMS_STDOUT_ACTIVE=false mocha <% if (compile) { %>--compilers js:babel-register <% } %>--throw-deprecation --ui bdd --full-trace --recursive test/e2e/test",
    "test:lint": "npm run test:lint:src -s && npm run test:lint:test",<% if (lint === 'airbnb') { %>
    "test:lint:src": "eslint src",
    "test:lint:test": "eslint test",<% } else if (lint === 'standard') { %>
    "test:lint:src": "standard src",
    "test:lint:test": "standard test",<% } else if (lint === 'semistandard') { %>
    "test:lint:src": "semistandard src",
    "test:lint:test": "semistandard test",<% } else { %>
    "test:lint:src": "echo 'no linting set up'; exit 0",
    "test:lint:test": "echo 'no linting set up'; exit 0",<% } %>
    "test:unit": "mocha <% if (compile) { %>--compilers js:babel-register <% } %>--throw-deprecation --ui bdd --full-trace --recursive test/unit",
    "watch:coverage": "mkdir -p build; nodemon --ignore './build' --exec 'npm run coverage -s' --legacy-watch",
    "watch:test": "mkdir -p build; nodemon --ignore './build' --exec 'npm run test -s' --legacy-watch",
    "watch:test:e2e": "mkdir -p build; nodemon --ignore './build' --exec 'npm run test:e2e -s' --legacy-watch",
    "watch:test:lint": "mkdir -p build; nodemon --ignore './build' --exec 'npm run test:lint -s' --legacy-watch",
    "watch:test:lint:src": "mkdir -p build; nodemon --ignore './build' --exec 'npm run test:lint:src -s' --legacy-watch",
    "watch:test:lint:test": "mkdir -p build; nodemon --ignore './build' --exec 'npm run test:lint:test -s' --legacy-watch",
    "watch:test:unit": "mkdir -p build; nodemon --ignore './build' --exec 'npm run test:unit -s' --legacy-watch"
  },
  "author": "<%- author %>",
  "dependencies": {},
  "devDependencies": {}
}
