/**
 * server.test.js
 */

/* Node modules */

/* Third-party modules */

/* Files */<% if (compile) { %>
import {expect, sinon} from '../../helpers/setup';
import server, {inject} from '../../../src/server/server';<% } else { %>
const {expect, sinon} = require('../../helpers/setup');
const factory = require('../../../src/server/server');

const server = factory.default;
const inject = factory.inject;<% } %>

describe('server tests', function () {

  describe('#inject', function () {

    it('should define the injector', function () {

      expect(inject).to.be.eql({
        name: 'server',
        deps: [
          'steeplejack-server',
          '$config',
          '<%- server %>',<% if (sockets) { %>
          'socketio',<% } %>
          '$steeplejack-app',
          '$logger',<% if (server === 'express') { %>
          'steeplejack-view'<% } else if (server === 'restify') { %>
          'steeplejack-fatal-exception'<% } %>
        ]
      });

    });

  });

  describe('#factory', function () {

    beforeEach(function () {
      this.config = {
        server: {<% if (server === 'express') { %>
          displayErrorDetail: 'displayErrorDetailVar',<% } %>
          port: 1234
        },
      };

      this.<%- server %>Inst = {};<% if (sockets) { %>

      this.socket = {};<% } %>

      this.serverInst = {<% if (server === 'express') { %>
        after: sinon.stub(),<% } %>
        uncaughtException: sinon.stub()
      };<% if (server === 'express') { %>
      this.serverInst.after.returns(this.serverInst);<% } %>
      this.serverInst.uncaughtException.returns(this.serverInst);

      this.logger = {
        trigger: sinon.spy()
      };

      this.outputHandler = sinon.spy();
      this.app = {
        createOutputHandler: sinon.stub()
          .returns(this.outputHandler),
      };
      this.Server = sinon.stub()
        .returns(this.serverInst);<% if (server === 'express') { %>

      this.View = {
        render: sinon.stub()
          .returns('viewRender'),
      };<% } %><% if (server === 'restify') { %>
      this.FatalException = sinon.spy();<% } %>

      const obj = server(this.Server, this.config, this.<%- server %>Inst<% if (sockets) { %>, this.socket<% } %>, this.app, this.logger<% if (server === 'express') { %>, this.View<% } %><% if (server === 'restify') { %>, this.FatalException<% } %>);

      expect(obj).to.be.equal(this.serverInst);

      expect(this.Server).to.be.calledOnce
        .calledWithNew
        .calledWithExactly(this.config.server, this.<%- server %>Inst<% if (sockets) { %>, this.socket<% } %>);
    });

    it('should test the uncaught exception handler', function () {
      const uncaught = this.serverInst.uncaughtException.args[0];

      expect(uncaught).to.be.an('array')
        .have.length(1);

      const req = 'myReq';
      const res = 'myRes';
      const err = new Error('some error');

      uncaught[0](req, res, err);

      const fn = this.outputHandler.args[0][2];

      expect(this.outputHandler).to.be.calledOnce
        .calledWithExactly(req, res, fn<% if (server === 'restify') { %>, false<% } %>);<% if (server === 'express') { %>

      expect(fn()).to.be.equal('viewRender');

      expect(this.logger.trigger).to.be.calledOnce
        .calledWithExactly('fatal', 'UNCAUGHT_EXCEPTION', {
          err
        });

      expect(this.View.render).to.be.calledOnce
        .calledWithExactly('error/uncaught', {
        displayErrorDetail: this.config.server.displayErrorDetail,
        err,
      }, 500);<% } else if (server === 'restify') { %>

      let fail = false;

      try {
        fn();
      } catch (err) {
        fail = true;

        expect(err).to.be.instanceof(this.FatalException);
        expect(this.FatalException).to.be.calledOnce
          .calledWithNew
          .calledWithExactly('Unknown fatal error');
      } finally {
        expect(fail).to.be.true;
      }<% } %>
    });<% if (server === 'express') { %>

    it('should test the 404 handler', function () {
      const missing = this.serverInst.after.args[0];

      expect(missing).to.be.an('array')
        .have.length(1);

      const req = 'myReq';
      const res = 'myRes';
      const err = new Error('some error');

      missing[0](req, res, err);

      const fn = this.outputHandler.args[0][2];

      expect(this.outputHandler).to.be.calledOnce
        .calledWithExactly(req, res, fn);

      expect(fn()).to.be.equal('viewRender');

      expect(this.View.render).to.be.calledOnce
        .calledWithExactly('error/404', {}, 404);
    });<% } %>

  });

});
